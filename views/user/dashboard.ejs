<div class="dashboardTopicPageContainer">
  <div class="backdrop"></div>
  <%- include("../partials/navbar.ejs") %>
  <div class="dashboardOptionsContainer">
    <div class="createTopicContainer">
      <button id="btnCreateTopicForm" class="icon iconLarge"></button>
    <span>Create Topic</span>
    </div>
    <div class="selectAllTopicsContainer">
      <button id="btnSelectAllTopics" class="icon iconLarge"></button>
    <span>Select All</span>
    </div>
    <div class="deleteAllTopicsContainer">
      <button id="btnDeleteSelected" class="icon iconLarge"></button>
    <span>Delete Selected</span>
    </div>
  </div>
  
  <div class="newTopicFormContainer">
    <h2 class="createTopicHeader">Create New Topic<button class="btnCancelNewTopic">X</button></h2>
    <form action="/topics/<%= user.username %>/create" method="POST" enctype="multipart/form-data" novalidate>
      <div class="newTopicNameContainer">
        <label for="name">Name: </label>
      <input
        type="text"
        id="name"
        name="topic[name]"
        placeholder="Enter Topic Title Here"
      />
      </div>
      <div class="newTopicDifficultyContainer">
        <label for="difficulty">Difficulty: </label>
      <select name="topic[difficulty]" id="difficulty">
        <option value="Beginner">Beginner</option>
        <option value="Intermediate">Intermediate</option>
        <option value="Advanced">Advanced</option>
      </select>
      </div>
      <div class="newTopicDescriptionContainer">
        <label for="description">Description: </label>
      <textarea
        id="description"
        name="topic[description]"
        maxlength="512"
        rows="10"
        cols="40"
      ></textarea>
      </div>
      <div class="newTopicFileContainer">
        <label for="btnFileUpload" class="file-upload" id="lblFileUpload">
          <div>Click or Drag Image to Upload</div>
          <img class="displayNone" src="" alt="">
        </label>
        <input type="file" id="btnFileUpload" name="topic[file]" hidden>
      </div>
      <div class="fileSelectedAndSizeLimitContainer">
        <span class="fileSelected" id="fileSelected">No file selected.</span>
        <span class="fileSizeLimit">Max File Size: 1MB</span>
      </div>
      <div class="newTopicAddBtn">
        <button>Add</button>
      </div>
    </form>
  </div>
  <div class="itemsSelectedContainer" id="itemsSelected"></div>
  <h1 class="dashboardTopicHeader">Topics</h1>
  <%- include("../partials/flashError.ejs") %> <%-
  include("../partials/flashSuccess.ejs") %>
  <div class="dashboardTopicList">
    <% if (topics.length > 0) { %> <% for (topic of topics) { %>
    <div class="dashboardTopicWrapper" id="<%=topic.name%>">
      <div class="topicButtonsContainer">
        <button id="btnSelect<%=topic.name%>" class="btnSelectTopic"></button>
        <section class="topicButtons">
          <button class="btnTopicEdit" id="btnEdit<%=topic.name%>">
            <img class="icon" src="/assets/svg/edit-dark.png" alt="edit" />
            <span>Edit Topic</span>
          </button>
          <form
            action="/topics/<%= user.username %>/delete/<%= topic.name %>"
            method="POST"
          >
            <button class="btnTopicDelete">
              <img class="icon" src="/assets/svg/trashBlack.svg" alt="delete" />
              <span>Delete Topic</span>
            </button>
          </form>
        </section>
      </div>
      <a href="/user/<%= user.username %>/dashboard/<%=topic.name%>"
        ><div class="dashboardTopicContainer">
          <div class="topicImageContainer">
           <img src="<%=topic.imageUrl%>" alt="">
          </div>
          <section id="topicInfo" class="topicInfo">
            <div class="dashboardTopicFirstRow">
              <p class="topicName"><%= topic.name %></p>
            </div>
            <p class="topicDifficulty"><%= topic.difficulty %></p>
            <p class="topicDescription" id="<%= topic.name %>Description">
              <%= topic.description %>
            </p>
          </section>
        </div>
      </a>
    </div>
    <div class="dashboardTopicWrapperEdit removeDisplay" id="edit<%=topic.name%>">
      <form
        action="/topics/<%= user.username %>/edit/<%=topic.name%>"
        method="POST"
      >
        <section class="topicButtons">
          <button class="btnTopicDelete">
            <img class="icon" src="/assets/svg/accept.png" alt="save changes" />
            <span>Save Changes</span>
          </button>

          <button
            type="button"
            class="btnTopicEdit"
            id="btnCancelEdit<%=topic.name%>"
          >
            <img class="icon" src="/assets/svg/cancel.png" alt="cancel" />
            <span>Cancel</span>
          </button>
        </section>
        <label for="topicName" class="lblTopicName">Topic Name</label>
        <input
          type="text"
          name="topic[name]"
          id="topicName"
          placeholder="<%= topic.name %>"
        />
        <div class="editDifficultyContainer">
          <label for="difficulty" class="lblTopicDifficulty">Difficulty</label>
          <select name="topic[difficulty]" id="difficulty">
            <option value="Beginner">Beginner</option>
            <option value="Intermediate">Intermediate</option>
            <option value="Advanced">Advanced</option>
          </select>
        </div>
        <label for="topicDescription" class="lblTopicDescription"
          >Description</label
        >
        <textarea
          name="topic[description]"
          id="<%= topic.name %>DescriptionInput"
          cols="50"
          rows="5"
          maxlength="255"
        ></textarea>
      </form>
    </div>

    <% } %> <% } %>
  </div>
</div>

<script>
  //Holds all topic names on dashboard
  let topics;
  const toggleNewTopicForm = () => {
    document.querySelector('.backdrop').classList.toggle('displayNone');
    document.querySelector('.newTopicFormContainer').classList.toggle('displayNone');
    document.querySelector('html').classList.toggle('overflowHidden');
  };
  const toggleTopicSelected = () => {
    
    document.querySelector('.btnSelectTopic').classList.toggle('btnSelectTopicSelected');
  };
  const toggleSelectAllTopics = (e) => {
    let topicContainers = document.getElementsByClassName('dashboardTopicWrapper');
    let topicButtons = document.getElementsByClassName('btnSelectTopic');
    let topicIsSelected = document.querySelector('btnSelectTopicSelected');
    let itemsSelected = document.getElementById('itemsSelected');
    
    if (e.target.classList.contains('selectedAll') || topicIsSelected) {
      e.target.classList.remove('selectedAll');
      document.getElementById('btnDeleteSelected').classList.remove('deleteSelected');
      //Create 'items selected' box at top with appropriate number selected
      itemsSelected.classList.remove('itemsSelected');
      itemsSelected.textContent = ``;
      //Remove highlighted button and border on all topics on dashboard
      for (let i = 0; i < topicContainers.length; i++) {
        topicContainers[i].classList.remove('dashboardTopicWrapperSelected');
        topicButtons[i].classList.remove('btnSelectTopicSelected');
      }
    }
    else {
      e.target.classList.add('selectedAll');
      document.getElementById('btnDeleteSelected').classList.add('deleteSelected');
      //Remove 'items selected' box at top of dashboard page
      itemsSelected.classList.add('itemsSelected');
      if (topicContainers.length === 1) {
        itemsSelected.textContent = `${topicContainers.length} item selected.`;
      } else {
        itemsSelected.textContent = `${topicContainers.length} items selected.`;
      }
      //Add highlighted button and border on all topics on dashboard
      for (let i = 0; i < topicContainers.length; i++) {
        topicContainers[i].classList.add('dashboardTopicWrapperSelected');
        topicButtons[i].classList.add('btnSelectTopicSelected');
      }
    }
  };
  const deleteSelectedTopics = async () => {
    let selectedTopics = document.querySelectorAll('.dashboardTopicWrapperSelected');
    if (selectedTopics.length > 0) {
      try {
        let topicsToDelete = new Array();
        for (let i = 0;i < selectedTopics.length; i++) {
          topicsToDelete.push(selectedTopics[i].getAttribute('id'));
        }
        await fetch('/topics/<%=user.username%>/deleteSelected', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'},
          body: JSON.stringify({
            topics: topicsToDelete
          }),
        });
        for (let i = 0;i < selectedTopics.length; i++) {
          selectedTopics[i].remove();
        }
        let itemsSelected = document.getElementById('itemsSelected');
        itemsSelected.classList.remove('itemsSelected');
        itemsSelected.textContent = ``;
        document.getElementById('btnDeleteSelected').classList.remove('deleteSelected');
      } catch {

      };
    }
    
  };
  const addTopicSelectEvents = () => {
    for (let i = 0;i < topics.length; i++) {
      document.getElementById(`btnSelect${topics[i].textContent}`).addEventListener("click", (e) => {
        let numOfSelected = document.getElementsByClassName('btnSelectTopicSelected').length;
        let allTopics = document.getElementsByClassName('btnSelectTopic');
        let totalTopics = allTopics.length;
        let itemsSelected = document.getElementById('itemsSelected');

        if (e.shiftKey) {
          //Get index of topic clicked
          const topicButtons = document.getElementsByClassName('btnSelectTopic');
          let currentItem = 0;
          let j = 0;
          let found = false;
          do {
            if (topicButtons[j].getAttribute('id') === e.target.getAttribute('id')) {
              found = true;
              currentItem = j;
              j--;
            }
            j++;
          } while (!found && j < totalTopics);

          found = false;
          let topicList = document.getElementsByClassName('btnSelectTopic');
          let firstPreviousItem = 0;
          
          //Shift+Click On Selected Item
          if (e.target.getAttribute('class').includes('btnSelectTopicSelected')) {
            do {
              //alert(!topicList[j].getAttribute('class').includes('btnSelectTopicSelected'));
              if (!topicList[j].getAttribute('class').includes('btnSelectTopicSelected')) {
                found = true;
                firstPreviousItem = j;
                j++;
              }
              j--;
            } while (!found && j >= firstPreviousItem);
 
            for (let k = firstPreviousItem; k <= currentItem; k++) {
              document.getElementById(`btnSelect${topics[k].textContent}`).classList.remove('btnSelectTopicSelected');
              document.getElementById(`${topics[k].textContent}`).classList.remove('dashboardTopicWrapperSelected');
            }
          } 
          //Shift+Click On Unselected Item
          else {
            do {
              if (topicList[j].getAttribute('class').includes('btnSelectTopicSelected')) {
                found = true;
                firstPreviousItem = j;
                j++;
              }
              j--;
            } while (!found && j >= 0);

            for (let k = firstPreviousItem; k <= i; k++) {
              document.getElementById(`btnSelect${topics[k].textContent}`).classList.add('btnSelectTopicSelected');
              document.getElementById(`${topics[k].textContent}`).classList.add('dashboardTopicWrapperSelected');
            }
          }
        }
        else {
          document.getElementById(`btnSelect${topics[i].textContent}`).classList.toggle('btnSelectTopicSelected');
          document.getElementById(`${topics[i].textContent}`).classList.toggle('dashboardTopicWrapperSelected');
        }
        
        numOfSelected = document.getElementsByClassName('btnSelectTopicSelected').length;

        (numOfSelected === totalTopics) 
        ? document.getElementById('btnSelectAllTopics').classList.add('selectedAll') 
        : document.getElementById('btnSelectAllTopics').classList.remove('selectedAll');

        if (numOfSelected > 0) {
          document.getElementById('btnDeleteSelected').classList.add('deleteSelected');
          itemsSelected.classList.add('itemsSelected');
          if (numOfSelected > 1) {
            itemsSelected.textContent = `${numOfSelected} items selected.`;
          }
          else {
            itemsSelected.textContent = `${numOfSelected} item selected.`;
          }
          
        }
        else {
          document.getElementById('btnDeleteSelected').classList.remove('deleteSelected');
          document.getElementById('btnSelectAllTopics').classList.remove('selectedAll');
          itemsSelected.classList.remove('itemsSelected');
          itemsSelected.textContent = ``;
        }
      });
    }
  };
  const topicImageEvent = () => {
    document.getElementById('btnFileUpload').addEventListener('change', function() {
      if (this.files[0].type.includes('image')) {
        document.getElementById('fileSelected').textContent = this.files[0].name;
      let reader = new FileReader();
      reader.onload = (e) => {
        let img = document.querySelector('.file-upload img');
        img.src = e.target.result;
        img.classList.remove('displayNone');
        document.querySelector('.file-upload div').classList.add('displayNone');
      }
      reader.readAsDataURL(this.files[0]);
      }
    });

    document.getElementById('lblFileUpload').addEventListener('dragover', (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = "copy";
    });
    document.getElementById('lblFileUpload').addEventListener('dragenter', (e) => {
      if (e.dataTransfer.items[0].kind === 'file') {
        document.getElementById('lblFileUpload').style.border = 'solid 1px blue';
      }
    });
    document.getElementById('lblFileUpload').addEventListener('dragleave', (e) => {
      document.getElementById('lblFileUpload').style.border = '';
    });
    document.getElementById('lblFileUpload').addEventListener('drop', (e) => {
      e.preventDefault();
      if (e.dataTransfer.items[0].kind === 'file') {
        let files = e.dataTransfer.files;
        let reader;
        for (let i = 0; i < files.length; i++) {
          if (files[i].type.includes('image')) {
            reader = new FileReader();
            reader.onload = (e2) => {
              let img = document.querySelector('.file-upload img');
              img.src = e2.target.result;
              img.classList.remove('displayNone');
              document.querySelector('.file-upload div').classList.add('displayNone');
              document.getElementById('fileSelected').textContent = files[i].name;
              document.getElementById('btnFileUpload').files = files;
            }
            reader.readAsDataURL(files[i]);
          }
        }
      }
      
    });
  }
  const init = () => {
    topics = document.getElementsByClassName("topicName");

    document.querySelector('.backdrop').classList.toggle('displayNone');
    document.querySelector('.newTopicFormContainer').classList.toggle('displayNone');

    document.getElementById("btnCreateTopicForm").addEventListener("click", toggleNewTopicForm);
    document.querySelector('.btnCancelNewTopic').addEventListener("click", toggleNewTopicForm);

    document.getElementById('btnSelectAllTopics').addEventListener('click', toggleSelectAllTopics);

    document.getElementById('btnDeleteSelected').addEventListener('click', deleteSelectedTopics);

    addTopicSelectEvents();
    topicImageEvent();
  };

  init();
  
  const addEditEvent = (btn, topicName) => {
    btn.addEventListener("click", () => {
      let topicInfo = document.getElementById(`${topicName}`);
      let form = document.getElementById(`edit${topicName}`);
      topicInfo.classList.add("removeDisplay");
      form.classList.remove("removeDisplay");
    });
  };
  const addCancelEditEvent = (btn, topicName) => {
    btn.addEventListener("click", () => {
      let topicInfo = document.getElementById(`${topicName}`);
      let form = document.getElementById(`edit${topicName}`);
      topicInfo.classList.remove("removeDisplay");
      form.classList.add("removeDisplay");
    });
  };
  const setDescriptionOnEditForm = (textArea, text) => {
    textArea.textContent = text.trim();
  };

  for (let i = 0; i < topics.length; i++) {
    addEditEvent(
      document.getElementById(`btnEdit${topics[i].textContent}`),
      topics[i].textContent,
      i
    );
    addCancelEditEvent(
      document.getElementById(`btnCancelEdit${topics[i].textContent}`),
      topics[i].textContent,
      i
    );
    setDescriptionOnEditForm(
      document.getElementById(`${topics[i].textContent}DescriptionInput`),
      document.getElementById(`${topics[i].textContent}Description`).textContent
    );
  }
</script>
